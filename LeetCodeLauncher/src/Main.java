import easyArray.*;
import easyBinary.*;
import easyGraph.*;
import easyLinkedList.*;
import easyDynamicProgramming.*;
import easyMatrix.*;
import easyBSTree.*;
import easyString.*;
import mediumArray.*;
import mediumString.*;
import mediumTree._0235_LowestCommonAncestorBinarySearchTree;
import other.*;

public class Main {
    public static void main(String[] args) {
        new _0003_LongestSubstringWithoutRepeatingCharacters().run();
        new PT1_MergeUnique().run();
        new GS2_SpaceBetweenWordsMid().run();
        new _0217_ContainsDuplicate().run();
        new _0121_BestTimeToBuyAndSellStock().run();
        new _0191_NumberOf1Bits().run();
        new _0338_CountingBits().run();
        new _0268_MissingNumber().run();
        new _0190_ReverseBits().run();
        new _0070_ClimbingStairs().run();
        new _0206_ReverseLinkedList().run();
        new _0226_InvertBinaryTree().run();
        new _0141_LinkedListCycle().run();
        new _0242_ValidAnagram().run();
        new _0125_ValidPalindrome().run();
        new _0020_ValidParentheses().run();
        new _0235_LowestCommonAncestorBinarySearchTree().run();
        new _0100_SameTree().run();
        new _0424_LongestRepeatingCharacterReplacement().run();
        new _0647_PalindromicSubstrings().run();
        new _0005_LongestPalindromicSubstring().run();
        new _0049_GroupAnagrams().run();
        new _0015_3Sum().run();
        new _0238_ProductArrayExceptSelf().run();
        //new _0033_SearchInRotatedSortedArray().run();
        //new _0053_MaximumSubarray().run();
        new _0011_ContainerWithMostWater().run();
        new _0387_FirstUniqueCharacterInString().run();
        new _0013_RomanToInteger().run();
        new _0014_LongestCommonPrefix().run();
        new _0028_ImplementStrNeedleHayStack().run();
        new _0058_LengthLastWord().run();
        new _0067_AddBinary().run();
        new _0001_TwoSum().run();
        new _0035_SearchInsertPosition().run();
        new _0101_SymmetricTree().run();
        new _0112_PathSum().run();
        new _0404_SumOfLeftLeaves().run();
        new _94_144_145_Traversals().run();
        new _0463_IslandPerimeter().run();
        new _1260_Shift2DGrid().run();
        new _0867_TransposeMatrix().run();
        new _0766_ToeplitzMatrix().run();
        new _0566_ReshapeTheMatrix().run();
        new _1030_MatrixCellsInDistanceOrder().run();
        new _1971_FindIfPathExistsInGraph().run();
        new _0997_FindTheTownJudge().run();
        new _0026_RemoveDuplicatesFromSortedArray().run();
        new _0228_SummaryRanges().run();
        new _0495_TeemoAttacking().run();
        new _0027_RemoveElement().run();
        new _0066_PlusOne().run();
        new _0136_SingleNumber().run();
        new _0169_MajorityElement().run();
        new _0219_ContainsDuplicateII().run();
        new _0283_MoveZeroes().run();
        //new _0303_RangeSumQueryImmutable().run(); submitted on first go without any testing
        new _0349_IntersectionOfTwoArrays().run();
        new _0350_IntersectionOfTwoArraysII().run();
        new _0414_ThirdMaximumNumber().run();
        new _0448_FindAllNumbersDisappearedInAnArray().run();
        new _0485_MaxConsecutiveOnes().run();
        new _0496_NextGreaterElementI().run();
        new _0506_RelativeRanks().run();
        new _2248_IntersectionOfMultipleArrays().run();
        new _0561_ArrayPartition().run();
        new _0455_AssignCookies().run();
        new _2215_FindTheDifferenceOfTwoArrays().run();
        new _0083_RemoveDuplicatesFromSortedList().run();
        new _0160_IntersectionOfTwoLinkedLists().run();
        new _0104_MaximumDepthOfBinaryTree().run();
        new _0703_KthLargestElementInStream().run();
        new _1046_LastStoneWeight().run();
        new _2099_FindSubsequenceOfLengthKWithTheLargestSum().run();
        new _2335_MinimumAmountOfTimeToFillCups().run();
        new _2357_MakeArrayZeroBySubtractingEqualAmounts().run();
        new _2357_MakeArrayZeroBySubtractingEqualAmounts().run();
        new _0110_BalancedBinaryTree().run();
        new _0111_MinimumDepthOfBinaryTree().run();
        new _0257_BinaryTreePaths().run();
        new _0530_MinimumAbsoluteDifferenceInBST().run();
        new _0572_SubtreeOfAnotherTree().run();
        new _0617_MergeTwoBinaryTrees().run();
        new _0637_AverageOfLevelsInBinaryTree().run();
        new _0653_TwoSumIVInputBST().run();
        new _0021_MergeTwoSortedLists().run();
        new _0118_PascalsTriangle().run();
        new _0119PascalsTriangleII().run();
        new _0746_MinCostClimbingStairs().run();
        new _0509_FibonacciNumber().run();
        new _0203_RemoveLinkedListElements().run();
        new AM1_CellComplete().run();
        new AM2_GreatestCommonDivisor().run();
        new _0234_PalindromeLinkedList().run();
        new _0876_MiddleOfTheLinkedList().run();
        new _1290_ConvertBinaryNumberInLinkedListToInteger().run();
        new AM3_SumMinimalPairs().run();
        new AM4_OptimalPairs().run();
        new _0459_RepeatedSubstringPattern().run();
        new _0168_ExcelSheetColumnTitle().run();
        new _0171_ExcelSheetColumnNumber().run();
        new _0205_IsomorphicStrings().run();
        new _0290_WordPattern().run();
        new _0344_ReverseString().run();
        new _0345_ReverseVowelsOfString().run();
        new _0389_FindTheDifference().run();
        new _0383_RansomNote().run();
        new _0392_IsSubsequence().run();
        new _0409_LongestPalindrome().run();
        new _0434_NumberOfSegmentsInString().run();
        new _0500_KeyboardRow().run();
        new _0541_ReverseStringII().run();
        new _0520_DetectCapital().run();
        new _0521_LongestUncommonSubsequenceI().run();
        new _0557_ReverseWordsInStringIII().run();
        new _0599_MinimumIndexSumOfTwoLists().run();
        new _0551_StudentAttendanceRecordI().run();
        new _0482_LicenseKeyFormatting().run();
        new GS1_LongestRepeatingCharBlock().run();
        new GS2_SpaceBetweenWordsMid().run();
        new _0039_CombinationSum().run();
        new _0018_4Sum().run();
        new _0046_Permutations().run();
        new _0047_PermutationsII().run();
    }
}